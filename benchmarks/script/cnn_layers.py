
# ====================================================================
#  You can add more layer shapes by creating new cnn_layers variables
# ====================================================================
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride



# ---------- BELOW ARE THE PROVIDED SHAPES (CONV LAYERS of 3 DNN Models) --------------------
# Alex Net w/o grouping specified in http://cs231n.stanford.edu/slides/2017/cs231n_2017_lecture9.pdf
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride
# cnn_layers = [
#     (227, 227, 3, 1, 96, 11, 11, 1, 1, 4, 4),
#     (27, 27, 96, 1, 256, 5, 5, 2, 2, 1, 1),
#     (13, 13, 256, 1, 384, 3, 3, 1, 1, 1, 1),
#     (13, 13, 384, 1, 384, 3, 3, 1, 1, 1, 1),
#     (13, 13, 384, 1, 256, 3, 3, 1, 1, 1, 1),
#     ]

# VGG-1 Net Specified in [Shafiee, ISCA 2016]
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride
vgg1 = [
    (224, 224, 3, 1, 64, 3, 3, 1, 1, 1, 1),
    (112, 112, 64, 1, 128, 3, 3, 1, 1, 1, 1),
    (56, 56, 128, 1, 256, 3, 3, 1, 1, 1, 1),
    (56, 56, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (28, 28, 256, 1, 512, 3, 3, 1, 1, 1, 1),
    (28, 28, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (14, 14, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (14, 14, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    ]

# VGG-2 Net Specified in [Shafiee, ISCA 2016]
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride
vgg2 = [
    (224, 224, 3, 1, 64, 3, 3, 1, 1, 1, 1),
    (224, 224, 64, 1, 64, 3, 3, 1, 1, 1, 1),
    (112, 112, 64, 1, 128, 3, 3, 1, 1, 1, 1),
    (112, 112, 128, 1, 128, 3, 3, 1, 1, 1, 1),
    (56, 56, 128, 1, 256, 3, 3, 1, 1, 1, 1),
    (56, 56, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (56, 56, 256, 1, 256, 1, 1, 0, 0, 1, 1),
    (28, 28, 256, 1, 512, 3, 3, 1, 1, 1, 1),
    (28, 28, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (28, 28, 512, 1, 512, 1, 1, 0, 0, 1, 1),
    (14, 14, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (14, 14, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (14, 14, 512, 1, 256, 1, 1, 1, 1, 1, 1),
]

# ResNet18 Net Specified in []
# (W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride)
resnet18 = [
    # Initial conv: 7x7, stride 2, pad 3 on 224x224 input → output 112x112 (followed by pooling)
    (224, 224, 3, 1, 64, 7, 7, 3, 3, 2, 2),
    # MaxPool: 3x3, stride 2, pad 1 on 112x112 input → output 56x56 (channels unchanged)
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 2, 2),

    # ----- Stage 1 (no downsampling, 56x56, 64 channels) -----
    # Block 1
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),  # conv1
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),  # conv2
    # Block 2
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),  # conv1
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),  # conv2

    # ----- Stage 2 (first block downsamples to 28x28, 128 channels) -----
    # Block 1 with projection (to match dimensions)
    (56, 56, 64, 1, 128, 1, 1, 0, 0, 2, 2),  # projection branch (1x1 conv, stride 2)
    (56, 56, 64, 1, 128, 3, 3, 1, 1, 2, 2),  # conv1 (stride 2 → 28x28)
    (28, 28, 128, 1, 128, 3, 3, 1, 1, 1, 1),  # conv2
    # Block 2 (no downsampling)
    (28, 28, 128, 1, 128, 3, 3, 1, 1, 1, 1),  # conv1
    (28, 28, 128, 1, 128, 3, 3, 1, 1, 1, 1),  # conv2

    # ----- Stage 3 (first block downsamples to 14x14, 256 channels) -----
    # Block 1 with projection
    (28, 28, 128, 1, 256, 1, 1, 0, 0, 2, 2),  # projection branch
    (28, 28, 128, 1, 256, 3, 3, 1, 1, 2, 2),  # conv1 (stride 2 → 14x14)
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),  # conv2
    # Block 2 (no downsampling)
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),  # conv1
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),  # conv2

    # ----- Stage 4 (first block downsamples to 7x7, 512 channels) -----
    # Block 1 with projection
    (14, 14, 256, 1, 512, 1, 1, 0, 0, 2, 2),  # projection branch
    (14, 14, 256, 1, 512, 3, 3, 1, 1, 2, 2),  # conv1 (stride 2 → 7x7)
    (7, 7, 512, 1, 512, 3, 3, 1, 1, 1, 1),    # conv2
    # Block 2 (no downsampling)
    (7, 7, 512, 1, 512, 3, 3, 1, 1, 1, 1),     # conv1
    (7, 7, 512, 1, 512, 3, 3, 1, 1, 1, 1),     # conv2
]

# ResNet50 Net Specified in []
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride
resnet50 = [
    (224, 224, 3, 1, 64, 7, 7, 3, 3, 2, 2),
    (56, 56, 64, 1, 64, 1, 1, 0, 0, 1, 1),
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),
    (56, 56, 64, 1, 256, 1, 1, 0, 0, 1, 1),
    (56, 56, 256, 1, 256, 1, 1, 0, 0, 1, 1),
    (56, 56, 256, 1, 64, 1, 1, 0, 0, 1, 1),
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),
    (56, 56, 64, 1, 256, 1, 1, 0, 0, 1, 1),
    (56, 56, 256, 1, 64, 1, 1, 0, 0, 1, 1),
    (56, 56, 64, 1, 64, 3, 3, 1, 1, 1, 1),
    (56, 56, 64, 1, 256, 1, 1, 0, 0, 1, 1),
    (56, 56, 256, 1, 128, 1, 1, 0, 0, 1, 1),
    (56, 56, 128, 1, 128, 3, 3, 1, 1, 2, 2),
    (28, 28, 128, 1, 512, 1, 1, 0, 0, 1, 1),
    (28, 28, 512, 1, 512, 1, 1, 0, 0, 2, 2),
    (28, 28, 512, 1, 128, 1, 1, 0, 0, 1, 1),
    (28, 28, 128, 1, 128, 3, 3, 1, 1, 1, 1),
    (28, 28, 128, 1, 512, 1, 1, 0, 0, 1, 1),
    (28, 28, 512, 1, 128, 1, 1, 0, 0, 1, 1),
    (28, 28, 128, 1, 128, 3, 3, 1, 1, 1, 1),
    (28, 28, 128, 1, 512, 1, 1, 0, 0, 1, 1),
    (28, 28, 512, 1, 128, 1, 1, 0, 0, 1, 1),
    (28, 28, 128, 1, 128, 3, 3, 1, 1, 1, 1),
    (28, 28, 128, 1, 512, 1, 1, 0, 0, 1, 1),
    (28, 28, 512, 1, 256, 1, 1, 0, 0, 1, 1),
    (28, 28, 256, 1, 256, 3, 3, 1, 1, 2, 2),
    (14, 14, 256, 1, 1024, 1, 1, 0, 0, 1, 1),
    (14, 14, 1024, 1, 1024, 1, 1, 0, 0, 2, 2),
    (14, 14, 1024, 1, 256, 1, 1, 0, 0, 1, 1),
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (14, 14, 256, 1, 1024, 1, 1, 0, 0, 1, 1),
    (14, 14, 1024, 1, 256, 1, 1, 0, 0, 1, 1),
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (14, 14, 256, 1, 1024, 1, 1, 0, 0, 1, 1),
    (14, 14, 1024, 1, 256, 1, 1, 0, 0, 1, 1),
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (14, 14, 256, 1, 1024, 1, 1, 0, 0, 1, 1),
    (14, 14, 1024, 1, 256, 1, 1, 0, 0, 1, 1),
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (14, 14, 256, 1, 1024, 1, 1, 0, 0, 1, 1),
    (14, 14, 1024, 1, 256, 1, 1, 0, 0, 1, 1),
    (14, 14, 256, 1, 256, 3, 3, 1, 1, 1, 1),
    (14, 14, 256, 1, 1024, 1, 1, 0, 0, 1, 1),
    (14, 14, 1024, 1, 512, 1, 1, 0, 0, 1, 1),
    (14, 14, 512, 1, 512, 3, 3, 1, 1, 2, 2),
    (7, 7, 512, 1, 2048, 1, 1, 0, 0, 1, 1),
    (7, 7, 2048, 1, 2048, 1, 1, 0, 0, 2, 2),
    (7, 7, 2048, 1, 512, 1, 1, 0, 0, 1, 1),
    (7, 7, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (7, 7, 512, 1, 2048, 1, 1, 0, 0, 1, 1),
    (7, 7, 2048, 1, 512, 1, 1, 0, 0, 1, 1),
    (7, 7, 512, 1, 512, 3, 3, 1, 1, 1, 1),
    (7, 7, 512, 1, 2048, 1, 1, 0, 0, 1, 1)
]

# output height: P = (H+2*Hpad-R)/Hstride + 1
# output width:  Q = (W+2*Wpad-S)/Wstride + 1
# MobV3 Net Specified in []
# 0, 1, 2, 3, 4, 5, 6,    7,    8,       9,      10
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride
mobv3 = [
    (224,224,3,1,16,3,3,1,1,2,2),
    (112,112,1,1,16,3,3,1,1,1,1),
    (112,112,16,1,16,1,1,0,0,1,1),
    (112,112,16,1,64,1,1,0,0,1,1),
    (112,112,1,1,64,3,3,1,1,2,2),
    (56,56,64,1,24,1,1,0,0,1,1),
    (56,56,24,1,72,1,1,0,0,1,1),
    (56,56,1,1,72,3,3,1,1,1,1),
    (56,56,72,1,24,1,1,0,0,1,1),
    (56,56,24,1,72,1,1,0,0,1,1),
    (56,56,1,1,72,5,5,2,2,2,2),
    (1,1,72,1,24,1,1,0,0,1,1),
    (1,1,24,1,72,1,1,0,0,1,1),
    (28,28,72,1,40,1,1,0,0,1,1),
    (28,28,40,1,120,1,1,0,0,1,1),
    (28,28,1,1,120,5,5,2,2,1,1),
    (1,1,120,1,32,1,1,0,0,1,1),
    (1,1,32,1,120,1,1,0,0,1,1),
    (28,28,120,1,40,1,1,0,0,1,1),
    (28,28,40,1,120,1,1,0,0,1,1),
    (28,28,1,1,120,5,5,2,2,1,1),
    (1,1,120,1,32,1,1,0,0,1,1),
    (1,1,32,1,120,1,1,0,0,1,1),
    (28,28,120,1,40,1,1,0,0,1,1),
    (28,28,40,1,240,1,1,0,0,1,1),
    (28,28,1,1,240,3,3,1,1,2,2),
    (14,14,240,1,80,1,1,0,0,1,1),
    (14,14,80,1,200,1,1,0,0,1,1),
    (14,14,1,1,200,3,3,1,1,1,1),
    (14,14,200,1,80,1,1,0,0,1,1),
    (14,14,80,1,184,1,1,0,0,1,1),
    (14,14,1,1,184,3,3,1,1,1,1),
    (14,14,184,1,80,1,1,0,0,1,1),
    (14,14,80,1,184,1,1,0,0,1,1),
    (14,14,1,1,184,3,3,1,1,1,1),
    (14,14,184,1,80,1,1,0,0,1,1),
    (14,14,80,1,480,1,1,0,0,1,1),
    (14,14,1,1,480,3,3,1,1,1,1),
    (1,1,480,1,120,1,1,0,0,1,1),
    (1,1,120,1,480,1,1,0,0,1,1),
    (14,14,480,1,112,1,1,0,0,1,1),
    (14,14,112,1,672,1,1,0,0,1,1),
    (14,14,1,1,672,3,3,1,1,1,1),
    (1,1,672,1,168,1,1,0,0,1,1),
    (1,1,168,1,672,1,1,0,0,1,1),
    (14,14,672,1,112,1,1,0,0,1,1),
    (14,14,112,1,672,1,1,0,0,1,1),
    (14,14,1,1,672,5,5,2,2,2,2),
    (1,1,672,1,168,1,1,0,0,1,1),
    (1,1,168,1,672,1,1,0,0,1,1),
    (7,7,672,1,160,1,1,0,0,1,1),
    (7,7,160,1,960,1,1,0,0,1,1),
    (7,7,1,1,960,5,5,2,2,1,1),
    (1,1,960,1,240,1,1,0,0,1,1),
    (1,1,240,1,960,1,1,0,0,1,1),
    (7,7,960,1,160,1,1,0,0,1,1),
    (7,7,160,1,960,1,1,0,0,1,1),
    (7,7,1,1,960,5,5,2,2,1,1),
    (1,1,960,1,240,1,1,0,0,1,1),
    (1,1,240,1,960,1,1,0,0,1,1),
    (7,7,960,1,160,1,1,0,0,1,1),
    (7,7,160,1,960,1,1,0,0,1,1)
]

# test model
# W, H, C, N, M, S, R, Wpad, Hpad, Wstride, Hstride
testnet = [
    (224, 224, 3, 1, 64, 7, 7, 3, 3, 2, 2)
]

# net_dim_list = [resnet50, mobv3, vgg1, vgg2, testnet]
net_dim_list = [resnet50, resnet18, mobv3, vgg1, vgg2, testnet]
net_name_list = ["resnet50", "resnet18", "mobv3", "vgg1", "vgg2", "testnet"]